apiVersion: v1
kind: ConfigMap
metadata:
  name: canvas-cfgmap
data:
  DB_DRIVER: "postgresql"
  DB_HOST: "postgresql-db-service"
  DB_PORT: "5432"
  RAILS_ENV: "production"
  REDIS_SERVER: "redis://redis-service:6379"
  MAIL_SERVER: "mail-service"
  PASSENGER_STARTUP_TIMEOUT: "300"
  DOMAIN: "docker_canvas_app:8900"
  APP_DOMAIN: "docker_canvas_app"
  # need both ports to be equal or it'll redirect HTTP to HTTPS, and we
  # haven't setup HTTPS
  CG_HTTP_PORT: "8900"
  CG_HTTPS_PORT: "8900"
  file-cache-store: |
    development:
      cache_store: redis_store
    
    production:
      cache_store: redis_store
    
    test:
      cache_store: redis_store
  file-cassandra: |
    # production:
    #   host: 10.11.12.13
    #   port: 8500
    #   ssl: true
    #   environment: prod
    #   dc: "consul"
    #   acl_token: "xxxxxxxx-yyyy-zzzz-1111-222222222222"
    # test:
    #   host: consul
    #   port: 8500
    #   ssl: false
    #   environment: test
    #   dc: "consul"
    #   init_values:
    #     canvas:
    #       signing-secret: astringthatisactually32byteslong
    #       encryption-secret: astringthatisactually32byteslong
    #     rich-content-service:
    #       app-host: rce.docker
    #       cdn-host: rce.docker
    #     address-book:
    #       app-host: http://address-book.docker
    #       secret: opensesame
    #     live-events-subscription-service:
    #       app-host: http://les.docker
    #       sad-panda: null
    # development:
    #   host: consul
    #   port: 8500
    #   ssl: false
    #   environment: "dev"
    #   init_values_witnout_env:
    #     canvas:
    #       signing-secret: astringthatisactually32byteslong
    #       encryption-secret: astringthatisactually32byteslong
    #     rich-content-service:
    #       app-host: rce.docker
    #       cdn-host: null
    #     address-book:
    #       app-host: http://address-book.docker
    #       secret: opensesame
    #     live-events-subscription-service:
    #       app-host: http://les.docker
    #       sad-panda: null
    #     live-events:
    #       aws_endpoint: http://kinesis.canvaslms.docker
    #       kinesis_stream_name: live-events
    #   init_values:
    #     math-man:
    #       base_url: 'http://mathman.docker'
    #       use_for_svg: 'false'
    #       use_for_mml: 'false'
  file-consul: |
    # production:
    #   host: 10.11.12.13
    #   port: 8500
    #   ssl: true
    #   environment: prod
    #   dc: "consul"
    #   acl_token: "xxxxxxxx-yyyy-zzzz-1111-222222222222"
    # test:
    #   host: consul
    #   port: 8500
    #   ssl: false
    #   environment: test
    #   dc: "consul"
    #   init_values:
    #     canvas:
    #       signing-secret: astringthatisactually32byteslong
    #       encryption-secret: astringthatisactually32byteslong
    #     rich-content-service:
    #       app-host: rce.docker
    #       cdn-host: rce.docker
    #     address-book:
    #       app-host: http://address-book.docker
    #       secret: opensesame
    #     live-events-subscription-service:
    #       app-host: http://les.docker
    #       sad-panda: null
    # development:
    #   host: consul
    #   port: 8500
    #   ssl: false
    #   environment: "dev"
    #   init_values_witnout_env:
    #     canvas:
    #       signing-secret: astringthatisactually32byteslong
    #       encryption-secret: astringthatisactually32byteslong
    #     rich-content-service:
    #       app-host: rce.docker
    #       cdn-host: null
    #     address-book:
    #       app-host: http://address-book.docker
    #       secret: opensesame
    #     live-events-subscription-service:
    #       app-host: http://les.docker
    #       sad-panda: null
    #     live-events:
    #       aws_endpoint: http://kinesis.canvaslms.docker
    #       kinesis_stream_name: live-events
    #   init_values:
    #     math-man:
    #       base_url: 'http://mathman.docker'
    #       use_for_svg: 'false'
    #       use_for_mml: 'false'
  file-database: |
    default: &default
      adapter: postgresql
      encoding: utf8
      host:     <%= ENV['DB_HOST'] %>
      port:     <%= ENV['DB_PORT'] %>
      database: <%= ENV['DB_NAME'] %>
      username: <%= ENV['DB_USERNAME'] %>
      password: <%= ENV['DB_PASSWORD'] %>
      timeout: 5000
    
    development:
      <<: *default
    
    production:
      <<: *default
    
    test:
      <<: *default
      database: <%= ENV['DB_NAME'] %>_test
  file-delayed-jobs: |
    default:
      workers:
      - queue: canvas_queue
  file-development-local: |
    config.cache_classes = true
    config.action_controller.perform_caching = true
    config.action_view.cache_template_loading = true
  file-domain: |
    default: &default
      domain: <%= ENV['DOMAIN'] %>
    
    development:
      <<: *default
    
    production:
      <<: *default
    
    test:
      <<: *default  
  file-dynamic-settings: |
    # this config file is useful if you don't want to run a consul
    # cluster with canvas.  Just provide the config data you would
    # like for the DynamicSettings class to find, and it will use
    # it whenever a call for consul data is issued. Data should be
    # shaped like the example below, one key for the related set of data,
    # and a hash of key/value pairs (no nesting)
    default: &default
      store:
        canvas:
          lti-keys:
            # these are all the same JWK but with different kid
            # to generate a new key, run the following in a Canvas console:
            #
            # key = OpenSSL::PKey::RSA.generate(2048)
            # key.public_key.to_jwk(kid: Time.now.utc.iso8601).to_json
            jwk-past.json: '{"kty":"RSA","e":"AQAB","n":"uX1MpfEMQCBUMcj0sBYI-iFaG5Nodp3C6OlN8uY60fa5zSBd83-iIL3n_qzZ8VCluuTLfB7rrV_tiX727XIEqQ","kid":"2018-05-18T22:33:20Z","d":"pYwR64x-LYFtA13iHIIeEvfPTws50ZutyGfpHN-kIZz3k-xVpun2Hgu0hVKZMxcZJ9DkG8UZPqD-zTDbCmCyLQ","p":"6OQ2bi_oY5fE9KfQOcxkmNhxDnIKObKb6TVYqOOz2JM","q":"y-UBef95njOrqMAxJH1QPds3ltYWr8QgGgccmcATH1M","dp":"Ol_xkL7rZgNFt_lURRiJYpJmDDPjgkDVuafIeFTS4Ic","dq":"RtzDY5wXr5TzrwWEztLCpYzfyAuF_PZj1cfs976apsM","qi":"XA5wnwIrwe5MwXpaBijZsGhKJoypZProt47aVCtWtPE"}'
            jwk-present.json: '{"kty":"RSA","e":"AQAB","n":"uX1MpfEMQCBUMcj0sBYI-iFaG5Nodp3C6OlN8uY60fa5zSBd83-iIL3n_qzZ8VCluuTLfB7rrV_tiX727XIEqQ","kid":"2018-06-18T22:33:20Z","d":"pYwR64x-LYFtA13iHIIeEvfPTws50ZutyGfpHN-kIZz3k-xVpun2Hgu0hVKZMxcZJ9DkG8UZPqD-zTDbCmCyLQ","p":"6OQ2bi_oY5fE9KfQOcxkmNhxDnIKObKb6TVYqOOz2JM","q":"y-UBef95njOrqMAxJH1QPds3ltYWr8QgGgccmcATH1M","dp":"Ol_xkL7rZgNFt_lURRiJYpJmDDPjgkDVuafIeFTS4Ic","dq":"RtzDY5wXr5TzrwWEztLCpYzfyAuF_PZj1cfs976apsM","qi":"XA5wnwIrwe5MwXpaBijZsGhKJoypZProt47aVCtWtPE"}'
            jwk-future.json: '{"kty":"RSA","e":"AQAB","n":"uX1MpfEMQCBUMcj0sBYI-iFaG5Nodp3C6OlN8uY60fa5zSBd83-iIL3n_qzZ8VCluuTLfB7rrV_tiX727XIEqQ","kid":"2018-07-18T22:33:20Z","d":"pYwR64x-LYFtA13iHIIeEvfPTws50ZutyGfpHN-kIZz3k-xVpun2Hgu0hVKZMxcZJ9DkG8UZPqD-zTDbCmCyLQ","p":"6OQ2bi_oY5fE9KfQOcxkmNhxDnIKObKb6TVYqOOz2JM","q":"y-UBef95njOrqMAxJH1QPds3ltYWr8QgGgccmcATH1M","dp":"Ol_xkL7rZgNFt_lURRiJYpJmDDPjgkDVuafIeFTS4Ic","dq":"RtzDY5wXr5TzrwWEztLCpYzfyAuF_PZj1cfs976apsM","qi":"XA5wnwIrwe5MwXpaBijZsGhKJoypZProt47aVCtWtPE"}'
    
    development:
      <<: *default
    
    production:
      <<: *default
    
    test:
      <<: *default      
  file-outgoing-mail: |
    default: &default
      address: <%= ENV['MAIL_SERVER'] %>
      port: <%= ENV['MAIL_PORT'] %>
      user_name: <%= ENV['MAIL_USERNAME'] %>
      password: <%= ENV['MAIL_PASSWORD'] %>
      authentication: "plain" # plain, login, or cram_md5
      domain: <%= ENV['MAIL_DOMAIN'] %>
      outgoing_address: <%= ENV['MAIL_DEFAULT_SENDER_ADDRESS'] %>
      default_name: <%= ENV['MAIL_DEFAULT_SENDER_NAME'] %>
    
    development:
      <<: *default
    
    production:
      <<: *default
    
    test:
      <<: *default
  file-redis: |
    default: &default
      servers:
      - <%= ENV['REDIS_SERVER'] %>
    
    test:
      <<: *default
    
    development:
      <<: *default
    
    production:
      <<: *default
  file-security: |
    default: &default
      encryption_key: facdd3a131ddd8988b14f6e4e01039c93cfa0160
      lti_iss: https://docker-canvas.instructure.com
      lti_grant_host: <%= ENV['DOMAIN'] %>
    
    production:
      <<: *default

    development:
      <<: *default
    
    test:
      <<: *default
  file-selenium: |
    # test:
    #     remote_url_firefox: http://selenium-firefox:4444/wd/hub
    #     remote_url_chrome: http://selenium-chrome:4444/wd/hub
    #     browser: chrome
    #     # auto_open_devtools: true
  file-vault: |
    # production:
    #   addr: https://vault.blah.com
    #   token_path: /path/to/token/on/disk
    #   kv_mount: app-canvas
    # test:
    #   addr: http://vault:8200
    #   token: canvas_root_token
    #   kv_mount: app-canvas
    # development:
    #   addr: http://vault:8200
    #   token: canvas_root_token
    #   kv_mount: app-canvas
  file-override-fill-lookup: |
    # frozen_string_literal: true
    
    # Copyright (C) 2021 - present Instructure, Inc.
    #
    # This file is part of Canvas.
    #
    # Canvas is free software: you can redistribute it and/or modify it under
    # the terms of the GNU Affero General Public License as published by the Free
    # Software Foundation, version 3 of the License.
    #
    # Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
    # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
    # A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
    # details.
    #
    # You should have received a copy of the GNU Affero General Public License along
    # with this program. If not, see <http://www.gnu.org/licenses/>.
    
    class FillLookupUuidAndResourceLinkUuidColumnsAtLtiResourceLinks < ActiveRecord::Migration[5.2]
        tag :postdeploy
    
        def up
          DataFixup::Lti::FillLookupUuidAndResourceLinkUuidColumns.run
        end
    
        def down; end
      end
  file-override-fill-custom-claim-columns: |
    # frozen_string_literal: true
    
    #
    # Copyright (C) 2020 - present Instructure, Inc.
    #
    # This file is part of Canvas.
    #
    # Canvas is free software: you can redistribute it and/or modify it under
    # the terms of the GNU Affero General Public License as published by the Free
    # Software Foundation, version 3 of the License.
    #
    # Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
    # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
    # A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
    # details.
    #
    # You should have received a copy of the GNU Affero General Public License along
    # with this program. If not, see <http://www.gnu.org/licenses/>.
    
    module DataFixup::Lti::FillCustomClaimColumnsForResourceLink
        def self.run
          update_context!
          drop_resource_links_without_a_context
    
          Lti::ResourceLink.in_batches do |resource_links|
            update_lookup_id!(resource_links)
          end
        end
    
        def self.drop_resource_links_without_a_context
          Lti::LineItem.connection.execute(%{
            DELETE FROM #{Lti::LineItem.quoted_table_name}
            WHERE lti_resource_link_id IN (
              SELECT ID FROM #{Lti::ResourceLink.quoted_table_name}
              WHERE context_type IS NULL OR context_id IS NULL
            );
          })
    
          Lti::ResourceLink.connection.execute(%{
            DELETE FROM #{Lti::ResourceLink.quoted_table_name}
            WHERE context_type IS NULL OR context_id IS NULL;
          })
        end
    
        def self.update_context!
          Lti::ResourceLink.
            joins("INNER JOIN #{Assignment.quoted_table_name} ON assignments.lti_context_id = lti_resource_links.resource_link_id").
            update_all("context_type = 'Assignment', context_id = assignments.id")
        end
    
        def self.update_lookup_id!(resource_links)
            resource_links.each do |resource_link|
                Lti::ResourceLink.connection.execute(%{
                    UPDATE #{Lti::ResourceLink.quoted_table_name}
                    SET lookup_id = '#{SecureRandom.uuid}'
                    WHERE id = #{resource_link.id};
                })
            end
        end
    end
  file-override-fill-lookup-uuid: |
    # frozen_string_literal: true
    
    #
    # Copyright (C) 2021 - present Instructure, Inc.
    #
    # This file is part of Canvas.
    #
    # Canvas is free software: you can redistribute it and/or modify it under
    # the terms of the GNU Affero General Public License as published by the Free
    # Software Foundation, version 3 of the License.
    #
    # Canvas is distributed in the hope that it will be useful, but WITHOUT ANY
    # WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
    # A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
    # details.
    #
    # You should have received a copy of the GNU Affero General Public License along
    # with this program. If not, see <http://www.gnu.org/licenses/>.
    
    module DataFixup::Lti::FillLookupUuidAndResourceLinkUuidColumns
        def self.run
          resource_links_to_update.in_batches do |resource_links|
            update_columns!(resource_links)
          end
        end
    
        # Our assumption is if the data-type is not valid anymore, it was due to an
        # accidental action (e.g. some change using rails console).
        # Canvas is responsible for generating the UUID and uses rails before actions
        # as Lti::ResourceLink.generate_lookup_id/generate_resource_link_id to set
        # the UUID properly.
        #
        # We figure out that we could:
        #  1. drop the record with invalid UUID, or;
        #  2. set a new UUID value to the columns that have invalid value;
        #
        # So, we decide that will be better to follow the second approach by
        # re-generate the UUID and set it to the old and the new column for consistency.
        def self.update_columns!(resource_links)
          resource_links.each do |resource_link|
            Lti::ResourceLink.connection.execute(%{
                UPDATE #{Lti::ResourceLink.quoted_table_name}
                SET lookup_uuid = '#{resource_link.lookup_id}',
                    resource_link_uuid = '#{resource_link.resource_link_id}'
                WHERE id = #{resource_link.id};
            })
          end
        end
    
        def self.resource_links_to_update
          Lti::ResourceLink.where(lookup_uuid: nil).or(Lti::ResourceLink.where(resource_link_uuid: nil))
        end
    end
  file-wait-for-it: |
    #!/usr/bin/env bash
    #   Use this script to test if a given TCP host/port are available
    
    WAITFORIT_cmdname=${0##*/}
    
    echoerr() { if [[ $WAITFORIT_QUIET -ne 1 ]]; then echo "$@" 1>&2; fi }
    
    usage()
    {
        cat << USAGE >&2
    Usage:
        $WAITFORIT_cmdname host:port [-s] [-t timeout] [-- command args]
        -h HOST | --host=HOST       Host or IP under test
        -p PORT | --port=PORT       TCP port under test
                                    Alternatively, you specify the host and port as host:port
        -s | --strict               Only execute subcommand if the test succeeds
        -q | --quiet                Don't output any status messages
        -t TIMEOUT | --timeout=TIMEOUT
                                    Timeout in seconds, zero for no timeout
        -- COMMAND ARGS             Execute command with args after the test finishes
    USAGE
        exit 1
    }
    
    wait_for()
    {
        if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
            echoerr "$WAITFORIT_cmdname: waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
        else
            echoerr "$WAITFORIT_cmdname: waiting for $WAITFORIT_HOST:$WAITFORIT_PORT without a timeout"
        fi
        WAITFORIT_start_ts=$(date +%s)
        while :
        do
            if [[ $WAITFORIT_ISBUSY -eq 1 ]]; then
                nc -z $WAITFORIT_HOST $WAITFORIT_PORT
                WAITFORIT_result=$?
            else
                (echo > /dev/tcp/$WAITFORIT_HOST/$WAITFORIT_PORT) >/dev/null 2>&1
                WAITFORIT_result=$?
            fi
            if [[ $WAITFORIT_result -eq 0 ]]; then
                WAITFORIT_end_ts=$(date +%s)
                echoerr "$WAITFORIT_cmdname: $WAITFORIT_HOST:$WAITFORIT_PORT is available after $((WAITFORIT_end_ts - WAITFORIT_start_ts)) seconds"
                break
            fi
            sleep 1
        done
        return $WAITFORIT_result
    }
    
    wait_for_wrapper()
    {
        # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
        if [[ $WAITFORIT_QUIET -eq 1 ]]; then
            timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --quiet --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
        else
            timeout $WAITFORIT_BUSYTIMEFLAG $WAITFORIT_TIMEOUT $0 --child --host=$WAITFORIT_HOST --port=$WAITFORIT_PORT --timeout=$WAITFORIT_TIMEOUT &
        fi
        WAITFORIT_PID=$!
        trap "kill -INT -$WAITFORIT_PID" INT
        wait $WAITFORIT_PID
        WAITFORIT_RESULT=$?
        if [[ $WAITFORIT_RESULT -ne 0 ]]; then
            echoerr "$WAITFORIT_cmdname: timeout occurred after waiting $WAITFORIT_TIMEOUT seconds for $WAITFORIT_HOST:$WAITFORIT_PORT"
        fi
        return $WAITFORIT_RESULT
    }
    
    # process arguments
    while [[ $# -gt 0 ]]
    do
        case "$1" in
            *:* )
            WAITFORIT_hostport=(${1//:/ })
            WAITFORIT_HOST=${WAITFORIT_hostport[0]}
            WAITFORIT_PORT=${WAITFORIT_hostport[1]}
            shift 1
            ;;
            --child)
            WAITFORIT_CHILD=1
            shift 1
            ;;
            -q | --quiet)
            WAITFORIT_QUIET=1
            shift 1
            ;;
            -s | --strict)
            WAITFORIT_STRICT=1
            shift 1
            ;;
            -h)
            WAITFORIT_HOST="$2"
            if [[ $WAITFORIT_HOST == "" ]]; then break; fi
            shift 2
            ;;
            --host=*)
            WAITFORIT_HOST="${1#*=}"
            shift 1
            ;;
            -p)
            WAITFORIT_PORT="$2"
            if [[ $WAITFORIT_PORT == "" ]]; then break; fi
            shift 2
            ;;
            --port=*)
            WAITFORIT_PORT="${1#*=}"
            shift 1
            ;;
            -t)
            WAITFORIT_TIMEOUT="$2"
            if [[ $WAITFORIT_TIMEOUT == "" ]]; then break; fi
            shift 2
            ;;
            --timeout=*)
            WAITFORIT_TIMEOUT="${1#*=}"
            shift 1
            ;;
            --)
            shift
            WAITFORIT_CLI=("$@")
            break
            ;;
            --help)
            usage
            ;;
            *)
            echoerr "Unknown argument: $1"
            usage
            ;;
        esac
    done
    
    if [[ "$WAITFORIT_HOST" == "" || "$WAITFORIT_PORT" == "" ]]; then
        echoerr "Error: you need to provide a host and port to test."
        usage
    fi
    
    WAITFORIT_TIMEOUT=${WAITFORIT_TIMEOUT:-15}
    WAITFORIT_STRICT=${WAITFORIT_STRICT:-0}
    WAITFORIT_CHILD=${WAITFORIT_CHILD:-0}
    WAITFORIT_QUIET=${WAITFORIT_QUIET:-0}
    
    # check to see if timeout is from busybox?
    WAITFORIT_TIMEOUT_PATH=$(type -p timeout)
    WAITFORIT_TIMEOUT_PATH=$(realpath $WAITFORIT_TIMEOUT_PATH 2>/dev/null || readlink -f $WAITFORIT_TIMEOUT_PATH)
    if [[ $WAITFORIT_TIMEOUT_PATH =~ "busybox" ]]; then
            WAITFORIT_ISBUSY=1
            WAITFORIT_BUSYTIMEFLAG="-t"
    
    else
            WAITFORIT_ISBUSY=0
            WAITFORIT_BUSYTIMEFLAG=""
    fi
    
    if [[ $WAITFORIT_CHILD -gt 0 ]]; then
        wait_for
        WAITFORIT_RESULT=$?
        exit $WAITFORIT_RESULT
    else
        if [[ $WAITFORIT_TIMEOUT -gt 0 ]]; then
            wait_for_wrapper
            WAITFORIT_RESULT=$?
        else
            wait_for
            WAITFORIT_RESULT=$?
        fi
    fi
    
    if [[ $WAITFORIT_CLI != "" ]]; then
        if [[ $WAITFORIT_RESULT -ne 0 && $WAITFORIT_STRICT -eq 1 ]]; then
            echoerr "$WAITFORIT_cmdname: strict mode, refusing to execute subprocess"
            exit $WAITFORIT_RESULT
        fi
        exec "${WAITFORIT_CLI[@]}"
    else
        exit $WAITFORIT_RESULT
    fi